train sub-models using traditional types:
* in the main function of the file train_c_elegans_independent_model.py, call the function train_sub_models_sub_types_mei_zhen(7).
* in the cluster's terminal run the command bsub < ClusterScripts/train_c_elegans_independent_model.sh -J locals[1-1600]

calculate the average connectivity matrices of trained models when neuronal birth times are noised:
* in the main function of the file train_c_elegans_independent_model.py, call the function calc_average_connectome_noisy_birth_times().
* in the cluster's terminal run the command bsub < ClusterScripts/train_c_elegans_independent_model.sh -J locals[1-100]

calculate the hierarchical clustering of neurons into cell types:
* call the function greedy_type_aggregation in the file er_block_model.py

train the single-stage model using varying number of types (the range of #types is 1-max_num_types, both for inferred and random types):
* in the main function of the file train_c_elegans_independent_model.py, call the function train_single_stage_artificial_types_mei_zhen_7(), or the function train_single_stage_random_types_mei_zhen()
* in the bash file train_c_elegans_model_types_range.sh, comment out all the lines with job indices greater than 1600 * max_num_types
* in the cluster's terminal run the command bash ClusterScripts/train_c_elegans_independent_model_1-50_types.sh ClusterScripts/train_c_elegans_independent_model.sh

run trained single-epoch independent models (simulate connectomic development):
* in the main function in the file train_c_elegans_independent_model.py, call the function run_c_elegans_model_distributed().
* in the cluster's terminal run the command bsub < ClusterScripts/train_c_elegans_independent_model.sh -J locals[1-<num_simulations_to_run>]

calculate the average connectivity matrices of trained models:
* in the main function in the file train_c_elegans_independent_model.py, call the funtion calc_average_adj_mat_inferred_types_distributed().
* in the cluster's terminal run the command bsub < ClusterScripts/train_c_elegans_independent_model.sh -J locals[1-<max_num_types>]

train models on model samples (as a control):
* in the main function in the file train_c_elegans_independent_model.py, call the funtion train_on_control_outputs().
*  in the cluster's terminal run the command bash ClusterScripts/train_on_control_outputs.sh ClusterScripts/train_c_elegans_independent_model.sh

find compact representations of models:
* in the main function in the file train_c_elegans_independent_model.py, call the funtion find_compact_representations().
* in the cluster's terminal run the command bsub < ClusterScripts/train_c_elegans_independent_model.sh -J locals[1-150]

compress 8-inferred-types-based models to all possible sizes and calculate their performance
* in the main function of the file train_c_elegans_independent_model.py, call the funtion calc_performance_of_compressed_models().
* in the cluster's terminal run the command bsub < ClusterScripts/train_c_elegans_independent_model.sh -J locals[2-52]

train the single-epoch reciprocal model across gamma values (2-9) on the full dataset:
* in the main function in the file train_c_elegans_reciprocal_model.py, call the function train_reciprocity_dependence_model_distributed_single_stage_full_dataset().
* in the cluster's terminal run the command bash ClusterScripts/train_c_elegans_reciprocal_model_across_gamas.sh ClusterScripts/train_c_elegans_reciprocal_model.sh

run trained single-epoch reciprocal models (simulate connectomic development):
* in the main function in the file train_c_elegans_reciprocal_model.py, call the function run_reciprocity_dependence_model_distributed_across_gammas_single_dev_stage(), and pass as an argument the desired range of gamma (reciprocity) values.
* in the cluster's terminal run the command bsub < ClusterScripts/train_c_elegans_reciprocal_model.sh -J locals[1-<num_simulations_to_run>]

train the single epoch model using the split of dyads into train and test halves:
* in the main function in the file train_c_elegans_reciprocal_model.py, call the function calc_dyads_dists_single_epoch_dyads_split().
* in the cluster's terminal run the command bash ClusterScripts/train_single_multiple_epochs_across_splits.sh ClusterScripts/train_c_elegans_reciprocal_model.sh

train the three epochs model using the split of dyads into train and test halves:
* in the main function in the file train_c_elegans_reciprocal_model.py, call the function train_three_epochs_dyads_split().
* in the cluster's terminal run the command bash ClusterScripts/train_single_multiple_epochs_across_splits.sh ClusterScripts/train_c_elegans_reciprocal_model.sh

extract and save maximum likelihoods parameters for the single and three-epochs models
* in the main function in the file train_c_elegans_reciprocal_model.py, call the functions save_max_like_params_per_split_single_epoch(), save_max_like_params_per_split_three_epochs() and run the script.

calculate the distributions of all dyads states across data splits:
* in the main function in the file train_c_elegans_reciprocal_model.py, call the functions calc_dyads_dists_single_epoch_dyads_split(), calc_dyads_dists_three_epochs_dyads_split(). It is possible to pass a desired S- value to these functions.
* in the cluster's terminal run the command bash ClusterScripts/calc_dyads_dists_across_splits.sh ClusterScripts/train_c_elegans_reciprocal_model.sh